using { /Fortnite.com/Devices }
using { /UnrealEngine.com/Temporary/UI }
using { /Verse.org/Simulation }



squid_game_cookie_manager := class(creative_device):
    
    @editable
    LeftClickInput : input_trigger_device = input_trigger_device{}

    @editable
    CompletedTrigger : trigger_device = trigger_device{}

    @editable
    FailedTrigger : trigger_device = trigger_device{}

    @editable
    CursorManager : cursor_manager_device =cursor_manager_device{}

    @editable
    CircleButton : button_device = button_device{}

    @editable
    StarButton : button_device = button_device{}

    @editable
    SquareButton : button_device = button_device{}

    @editable
    TriangleButton : button_device = button_device{}

    @editable
    Lines : []line = array{}

    OnBegin<override>()<suspends>:void=
        CircleButton.InteractedWithEvent.Subscribe(callBack(shapes){Arg:=shapes.Circle,Func:=HandleOpenMenu}.Invoke)
        SquareButton.InteractedWithEvent.Subscribe(callBack(shapes){Arg:=shapes.Square,Func:=HandleOpenMenu}.Invoke)
        TriangleButton.InteractedWithEvent.Subscribe(callBack(shapes){Arg:=shapes.Triangle,Func:=HandleOpenMenu}.Invoke)
        StarButton.InteractedWithEvent.Subscribe(callBack(shapes){Arg:=shapes.Star,Func:=HandleOpenMenu}.Invoke)
        
        CompletedTrigger.TriggeredEvent.Subscribe(OnCompleted)
        FailedTrigger.TriggeredEvent.Subscribe(OnFailed)

    HandleOpenMenu(Agent : agent, Shape : shapes):void=
        if:
            Player := player[Agent]
        then:
            CookieGame := squid_game_cookie_menu:
                RemoveUIEvent:=CursorManager.RemoveUIEvent
                CompletedTrigger:=CompletedTrigger
                FailedTrigger:=FailedTrigger
                LeftClickInput:=LeftClickInput
                Shape:=Shape
                Lines := Lines
            spawn{CursorManager.HandleCursorMenu(Player,CookieGame)}

    OnCompleted(MaybeAgent : ?agent):void=
        if:
            Agent := MaybeAgent?
            Player := player[Agent]
        then:
            CursorManager.RemoveUIEvent.Signal(Player)
            Print("agent completed the minigame")

    OnFailed(MaybeAgent : ?agent):void=
        if:
            Agent := MaybeAgent?
            Player := player[Agent]
        then:
            CursorManager.RemoveUIEvent.Signal(Player)
            Print("agent failed the minigame")